#### Analysis ####
library(plyr)
library(tidyverse)
library(lubridate)
data <- read_csv("RelevantBookings.csv")
main_data <- read_csv("bookings_clean.csv") #this includes all datapoints
## Convert to Date
data$Last.Booking.Date <- mdy(data$Last.Booking.Date)
data$Last.Release.Date <- mdy(data$Last.Release.Date)
main_data$Last.Booking.Date <- mdy(main_data$Last.Booking.Date)
main_data$Last.Release.Date <- mdy(main_data$Last.Release.Date)
range(data$Last.Booking.Date) # one year of data: 2017-12-31, 2019-01-01
range(main_data$Last.Booking.Date) # one year of data: 2017-12-31, 2019-01-01
## Create a short form of relevant data i.e: (warrants not unlisted)
main_data$uid <- 1:nrow(main_data)
data_short <- main_data %>% filter(uid %in% data$uid)
# check
nrow(data_short) == length(unique(data$uid))
#we can see that the duplicates arise from recommits so we should remove them from both datasets
data_short <- data_short %>% filter(Booking.Type != "RECOMMIT")
data <- data %>% filter(Booking.Type != "RECOMMIT")
#final check
data_dups <- data_short[c("Full.Name", "Last.Booking.Date")]
data_dups <- data_dups[duplicated(data_dups),]
nrow(data_dups) #equal to 0 so no longer duplicates...
rm(data_dups)
getwd()
setwd("H:/Public/Justice Program/Reports and Pubs/Crim/Arnold Foundation Fees and Fines (Phase II)/Data/Cost Data/Florida/Leon_County/JailCosts")
#### Analysis ####
library(plyr)
library(tidyverse)
library(lubridate)
data <- read_csv("RelevantBookings.csv")
main_data <- read_csv("bookings_clean.csv") #this includes all datapoints
## Convert to Date
data$Last.Booking.Date <- mdy(data$Last.Booking.Date)
data$Last.Release.Date <- mdy(data$Last.Release.Date)
main_data$Last.Booking.Date <- mdy(main_data$Last.Booking.Date)
main_data$Last.Release.Date <- mdy(main_data$Last.Release.Date)
range(data$Last.Booking.Date) # one year of data: 2017-12-31, 2019-01-01
range(main_data$Last.Booking.Date) # one year of data: 2017-12-31, 2019-01-01
## Create a short form of relevant data i.e: (warrants not unlisted)
main_data$uid <- 1:nrow(main_data)
data_short <- main_data %>% filter(uid %in% data$uid)
# check
nrow(data_short) == length(unique(data$uid))
#we can see that the duplicates arise from recommits so we should remove them from both datasets
data_short <- data_short %>% filter(Booking.Type != "RECOMMIT")
data <- data %>% filter(Booking.Type != "RECOMMIT")
#final check
data_dups <- data_short[c("Full.Name", "Last.Booking.Date")]
data_dups <- data_dups[duplicated(data_dups),]
nrow(data_dups) #equal to 0 so no longer duplicates...
rm(data_dups)
nrow(data_dups) #equal to 0 so no longer duplicates...
#### Analysis ####
library(plyr)
library(tidyverse)
library(lubridate)
data <- read_csv("RelevantBookings.csv")
main_data <- read_csv("bookings_clean.csv") #this includes all datapoints
## Convert to Date
data$Last.Booking.Date <- mdy(data$Last.Booking.Date)
data$Last.Release.Date <- mdy(data$Last.Release.Date)
main_data$Last.Booking.Date <- mdy(main_data$Last.Booking.Date)
main_data$Last.Release.Date <- mdy(main_data$Last.Release.Date)
range(data$Last.Booking.Date) # one year of data: 2017-12-31, 2019-01-01
range(main_data$Last.Booking.Date) # one year of data: 2017-12-31, 2019-01-01
## Create a short form of relevant data i.e: (warrants not unlisted)
main_data$uid <- 1:nrow(main_data)
data_short <- main_data %>% filter(uid %in% data$uid)
# check
nrow(data_short) == length(unique(data$uid))
#we can see that the duplicates arise from recommits so we should remove them from both datasets
data_short <- data_short %>% filter(Booking.Type != "RECOMMIT")
data <- data %>% filter(Booking.Type != "RECOMMIT")
#final check
data_dups <- data_short[c("Full.Name", "Last.Booking.Date")]
data_dups <- data_dups[duplicated(data_dups),]
nrow(data_dups) #equal to 0 so no longer duplicates...
rm(data_dups)
View(data_short)
grepl("\\d{0,1}",data_short$counts[1090])
grepl("\\d{0,1}",data_short$counts[1090])
grepl("^\\d((?!\d)",data_short$counts[1090])
grepl("^\\d((?!\\d)",data_short$counts[1090])
grepl("^\\d((?!\\d)",data_short$counts[1090], perl = T)
grepl("[0:9]((?!\\d)",data_short$counts[1090], perl = T)
grepl("[0:9]",data_short$counts[1090], perl = T)
grepl("^\\d",data_short$counts[1090], perl = T)
grepl("^\\d",data_short$counts[1090], perl = T)
grepl("\b[1-9]\b",data_short$counts[1090], perl = T)
grepl("\b[1-9]\b",data_short$counts[1089], perl = T)
grepl("\b\\d\b",data_short$counts[1089], perl = T)
View(data)
rm(list=ls(()))
rm(list=ls(())
rm(list=ls())
#### Analysis ####
library(plyr)
library(tidyverse)
library(lubridate)
data <- read_csv("RelevantBookings.csv")
main_data <- read_csv("bookings_clean.csv") #this includes all datapoints
## Convert to Date
data$Last.Booking.Date <- mdy(data$Last.Booking.Date)
data$Last.Release.Date <- mdy(data$Last.Release.Date)
main_data$Last.Booking.Date <- mdy(main_data$Last.Booking.Date)
main_data$Last.Release.Date <- mdy(main_data$Last.Release.Date)
range(data$Last.Booking.Date) # one year of data: 2017-12-31, 2019-01-01
range(main_data$Last.Booking.Date) # one year of data: 2017-12-31, 2019-01-01
## Create a short form of relevant data i.e: (warrants not unlisted)
main_data$uid <- 1:nrow(main_data)
data_short <- main_data %>% filter(uid %in% data$uid)
gsub("\\w+","",data_short$counts)
gsub("\\w+[^0-9]","",data_short$counts)
gsub("\\D+","",data_short$counts)
gsub("\\D+[^,]","",data_short$counts)
gsub("\\D+","",data_short$counts)
gsub("\\D[^:punct:]","",data_short$counts)
gsub("\\D"," ",data_short$counts)
gsub("[^0-9]"," ",data_short$counts)
gsub("[^0-9,]"," ",data_short$counts)
gsub("[^0-9,]","",data_short$counts)
data_short$counts2 <- gsub("[^0-9,]","",data_short$counts)
View(data_short)
data_short %>%
filter(counts2 == "1")
OneCharge <- data_short %>%
filter(counts2 == "1")
View(OneCharge)
gsub("[:punc:]", "", OneCharge$charges_clean)
gsub("[:punct:]", "", OneCharge$charges_clean)
gsub(",", "", OneCharge$charges_clean)
data_short$counts2 <- gsub("[^0-9,]","",data_short$counts)
OneCharge <- data_short %>%
filter(counts2 == "1")
OneCharge$charges_clean <- gsub(",", " ", OneCharge$charges_clean)
OneCharge$charges_clean
if(!require(devtools)) {install.packages("devtools")}
devtools::install_github("brooke-watson/BRRR")
